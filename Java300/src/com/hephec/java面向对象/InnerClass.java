package com.hephec.java面向对象;

public class InnerClass {
	//内部类
	/**
	 * --局部内部类
	 * --成员内部类
	 * --静态内部类
	 * --匿名内部类
	*/
	
	public static void main(String[] args) {
		/**
		 * 1.内部类是一种编译时的语法，编译后生成的两个类是独立的两个类
		 * 
		 * 2.可以自由的访问外部类的任何成员(包括私有成员)，
		 *	但外部类不能直接访问内部类的成员
		 * 
		 * 3.内部类可为静态，可用protected和private修饰
		 * 	而外部类只能使用public和缺省的包访问权限
		 * 
		 * 4.在内部类中访问实例变量：
		 * 	--this.属性
		 * 	在内部类访问外部类的实例变量:
		 * 	--外部类名.this.属性
		 * 	不可以有静态属性和方法(final除外),因为static在加载类的时候创建，这是内部类还没有被创建
		 * 在创建成员内部类的实例时，外部类的实例必须存在
		 * 在外部类的内部实例对象(Foo外部类，Koo成员内部类)
		 * 		 Koo koo=new Koo();
		 * 在外部类的外部实例化对象
		 * 		Foo foo=new Foo();
		 * 		Koo koo=foo.new Koo();
		 * 		Foo.Koo koo=new Foo().new Koo();
		 * 5.局部内部类
		 * 	在方法中定义的内部类称为局部内部类，类似局部变量，不可以修饰符，其范围定义为它的代码块
		 * 	可以访问外部类的所有成员，还可以访问所在方法中的final类型的参数和变量
		 * 	要想使用局部内部类时需要生产对象，对象调用方法，在方法中才能调用其局部内部类
		 * 	局部内部类不能声明接口
		 * 6.静态内部类
		 * 	静态内部了定义在类中，在任何方法外，用static定义
		 * 	静态内部类能访问外部类的静态成员:不能直接访问外部类的实例成员，但而已通过歪不了的实例(new d对象来访问)
		 * 	静态内部类里面可以定义静态成员(其他内部类不可以)
		 *	静态内部类不可使用private定义
		 *	静态内部类的对象可以直接生成
		 *	Foo.koo koo=new Foo.Koo();
		 * 7.匿名内部了的特定：
		 *	没有类名，必须继承一个类或者实现一个为借口，不能有显示的
		 *	extends或者implements子句
		 *	不能有构造方法，没有内部，可以通过new<父类名>创建其对象，
		 *	匿名内部类一次性的创建其对象
		 *	
		 */
	}
}
